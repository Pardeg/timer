{"version":3,"sources":["components/timer/timer.js","components/display/display.js","components/countdawnControl/countdawnControl.js","components/countdown/countdown.js","components/app/app.js","index.js","sounds/Tony Igy - Astronomia (mp3cut.net).mp3"],"names":["Header","Layout","Content","Footer","initialState","isActive","start","interval","Timer","state","calcTime","setState","Date","now","timer","setTimeout","startTimer","resetTimer","clearTimeout","pauseTimer","toggleButton","clearInterval","this","centiseconds","Math","floor","slice","seconds","minutes","className","onClick","React","Component","Display","props","percent","displayMinutes","displaySeconds","type","defaultProps","Control","reset","toggle","startButton","resetButton","sound","Audio","mySound","allTime","onePercent","inputSeconds","inputMinutes","inputSlider","Countdown","value","inputSecondsSlider","myInterval","play","startCountdown","resetCountdown","pause","currentTime","pauseCountdawn","buttonToggle","timePercent","ceil","active","сlassName","onChange","disabled","max","defaultValue","min","step","TabPane","Tabs","callback","key","console","log","App","defaultActiveKey","tab","mountNode","document","getElementById","ReactDOM","render","module","exports"],"mappings":"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","file":"static/js/main.072606da.chunk.js","sourcesContent":["/* eslint-disable */\nimport React from 'react';\nimport './timer.scss';\nimport {Button, Layout} from 'antd';\n\nconst {Header, Content, Footer} = Layout;\nconst initialState = {\n    isActive: false,\n    start: 0,\n    interval: 0\n}\nexport default class Timer extends React.Component {\n    state = initialState;\n\n    componentWillUnmount() {\n        clearInterval(this.timer);\n    }\n\n    calcTime = () => {\n        this.setState(({start, interval}) => ({\n            interval: Date.now() - start\n        }));\n        this.timer = setTimeout(this.calcTime, 100);\n    }\n\n    startTimer = () => {\n        const {start} = this.state;\n        if (start > 0) {\n            this.setState(() => ({isActive: true}));\n            this.calcTime();\n        } else {\n            this.setState(() => ({start: Date.now(), isActive: true}));\n            this.calcTime();\n        }\n\n    };\n\n    resetTimer = () => {\n        this.setState(initialState);\n        clearTimeout(this.timer);\n    };\n\n    pauseTimer = () => {\n        this.setState(({interval, isActive}) => ({start: Date.now(), isActive: !isActive}));\n        clearTimeout(this.timer);\n    };\n    toggleButton = () => {\n        const {isActive} = this.state;\n        if (isActive) {\n            this.pauseTimer();\n        } else {\n            this.startTimer();\n        }\n    }\n\n    render() {\n        const {isActive, interval} = this.state;\n        const centiseconds = `0${Math.floor(interval / 10) % 100}`.slice(-2);\n        const seconds = `0${Math.floor(interval / 1000) % 60}`.slice(-2);\n        const minutes = `0${Math.floor(interval / 60000) % 60}`.slice(-2);\n        return (\n            <Layout className=\"timer\">\n                <Header className=\"timer__header\">Timer</Header>\n                <Content className=\"timer__display\">\n                    {interval === 0 ? `00:00:00` : `${minutes}:${seconds}:${centiseconds}`}\n                </Content>\n                <Footer>\n                    <Button className=\"btn\" onClick={this.toggleButton}>\n                        {isActive ? 'Pause' : 'Start'}\n                    </Button>\n                    <Button className=\"btn\" onClick={this.resetTimer}>\n                        Reset\n                    </Button>\n                </Footer>\n            </Layout>\n        );\n    }\n}\n","import React from 'react';\nimport './display.scss';\nimport {Progress} from 'antd';\nimport PropTypes from 'prop-types';\n\nconst Display = (props) => {\n  const { seconds, percent } = props;\n  const displayMinutes = `0${Math.floor(seconds / 60)}`.slice(-2);\n  const displaySeconds = `0${seconds % 60}`.slice(-2);\n  return (\n    <div className=\"display\">\n      <div className=\"display-time\">\n        {displayMinutes}:{displaySeconds}\n      </div>\n      <Progress type=\"circle\" percent={percent} />\n    </div>\n  );\n};\nDisplay.defaultProps = {\n  seconds: 0,\n  percent: 0,\n};\nDisplay.propTypes = {\n  seconds: PropTypes.number,\n  percent: PropTypes.number,\n};\nexport default Display;\n","import React from 'react';\nimport { Button } from 'antd';\nimport PropTypes from 'prop-types';\nimport './countdawnControl.scss';\n\nconst Control = (props) => {\n  const { isActive, reset, toggle } = props;\n  const startButton = (\n    <Button onClick={toggle} className=\"control__btn\">\n      {isActive ? 'Pause' : 'Start'}\n    </Button>\n  );\n  const resetButton = (\n    <Button onClick={reset} className=\"control__btn\">\n      Reset\n    </Button>\n  );\n  return (\n    <div className=\"control\">\n      {startButton}\n      {resetButton}\n    </div>\n  );\n};\n\nControl.defaultProps = {\n  isActive: false,\n  toggle: null,\n  reset: null,\n};\n\nControl.propTypes = {\n  isActive: PropTypes.bool,\n  toggle: PropTypes.func,\n  reset: PropTypes.func,\n};\nexport default Control;\n","import React from 'react';\nimport './countdown.scss';\nimport { InputNumber, Layout, Slider } from 'antd';\nimport Display from '../display/display';\nimport Control from '../countdawnControl/countdawnControl';\nimport mySound from '../../sounds/Tony Igy - Astronomia (mp3cut.net).mp3';\n\nconst sound = new Audio(mySound);\nconst initialState = {\n  seconds: 0,\n  isActive: false,\n  allTime: 0,\n  onePercent: 0,\n  inputSeconds: 0,\n  inputMinutes: 0,\n  inputSlider: 0,\n};\nconst { Header, Content, Footer } = Layout;\nexport default class Countdown extends React.Component {\n  state = initialState;\n\n  inputMinutes = (value) => {\n    this.setState(() => ({\n      inputMinutes: value,\n    }));\n  };\n\n  inputSeconds = (value) => {\n    this.setState(() => ({ inputSeconds: value }));\n  };\n\n  inputSecondsSlider = (value) => {\n    this.setState(() => ({\n      inputSlider: value,\n    }));\n  };\n\n  calcTime = () => {\n    const { seconds, isActive } = this.state;\n    this.myInterval = setTimeout(this.calcTime, 1000);\n    if (seconds > 0) {\n      this.setState(() => ({\n        seconds: seconds - 1,\n        isActive: true,\n      }));\n    }\n    if (seconds === 0 && isActive === true) {\n      sound.play();\n    }\n  };\n\n  startCountdown = () => {\n    const { inputMinutes, inputSeconds, inputSlider } = this.state;\n    if (inputMinutes > 0 || inputSeconds > 0 || inputSlider > 0) {\n      this.setState(() => ({\n        seconds: inputMinutes * 60 + inputSeconds + inputSlider,\n        onePercent: (inputSeconds + inputMinutes * 60 + inputSlider) / 100,\n        allTime: inputMinutes * 60 + inputSeconds + inputSlider,\n      }));\n      this.calcTime();\n    }\n  };\n\n  resetCountdown = () => {\n    sound.pause();\n    sound.currentTime = 0;\n    this.setState(initialState);\n    clearTimeout(this.myInterval);\n  };\n\n  pauseCountdawn = () => {\n    clearTimeout(this.myInterval);\n    this.setState(() => ({ isActive: false }));\n  };\n\n  buttonToggle = () => {\n    const { isActive } = this.state;\n    if (isActive) {\n      this.pauseCountdawn();\n    } else {\n      this.startCountdown();\n    }\n  };\n\n  render() {\n    const { seconds, isActive, allTime, onePercent } = this.state;\n    const timePercent = Math.ceil((allTime - seconds) / onePercent);\n    return (\n      <Layout className=\"countdown\">\n        <Header className=\"countdown__title\">Countdown</Header>\n        <Content className=\"countdown__display\">\n          <Display seconds={seconds} active={isActive} percent={timePercent} />\n          <Control toggle={this.buttonToggle} reset={this.resetCountdown} isActive={isActive} />\n        </Content>\n        <Footer>\n          <div сlassName=\"countdown__input\">\n            <label className=\"countdown__input-item\">\n              <InputNumber onChange={this.inputMinutes} disabled={isActive} max={720} />\n              Minutes\n            </label>\n\n            <label className=\"countdown__input-item\">\n              <InputNumber\n                onChange={this.inputSeconds}\n                disabled={isActive}\n                defaultValue={0}\n                min={0}\n                max={60}\n              />\n              Seconds\n            </label>\n          </div>\n          <Slider onChange={this.inputSecondsSlider} disabled={isActive} step={15} max={3600} />\n        </Footer>\n      </Layout>\n    );\n  }\n}\n","import { Tabs } from 'antd';\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport Timer from '../timer/timer';\nimport Countdown from '../countdown/countdown';\nimport '@csstools/normalize.css';\nimport './app.scss';\n\nconst { TabPane } = Tabs;\n\nfunction callback(key) {\n  console.log(key);\n}\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Tabs defaultActiveKey=\"1\" onChange={callback} className=\"container\">\n        <TabPane tab=\"Tab 1\" key=\"1\">\n          <Timer />\n        </TabPane>\n        <TabPane tab=\"Tab 2\" key=\"2\">\n          <Countdown />\n        </TabPane>\n      </Tabs>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app';\n\nconst mountNode = document.getElementById('root');\n\nReactDOM.render(<App />, mountNode);\n","module.exports = __webpack_public_path__ + \"static/media/Tony Igy - Astronomia (mp3cut.net).4e8d9bd0.mp3\";"],"sourceRoot":""}